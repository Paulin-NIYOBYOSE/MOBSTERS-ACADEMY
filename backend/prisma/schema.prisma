generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String
  password      String
  roles         UserRole[]
  refreshTokens RefreshToken[]
  pendingRequests PendingRoleRequest[]
  uploadedCourses Course[]
  uploadedSessions LiveSession[]
  uploadedSignals Signal[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  users     UserRole[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model UserRole {
  userId    Int
  roleId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, roleId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  hashedToken String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PendingRoleRequest {
  id        Int      @id @default(autoincrement())
  userId    Int
  program   String   // 'academy', 'mentorship'
  status    String   @default("pending") // 'pending', 'paid', 'approved', 'rejected'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, program])
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  roleAccess  String[] // e.g., ['academy_student', 'community_student']
  uploadedBy  Int
  user        User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  videos      CourseVideo[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LiveSession {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  roleAccess  String[]
  uploadedBy  Int
  user        User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Signal {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  roleAccess  String[]
  uploadedBy  Int
  user        User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CourseVideo {
  id          Int      @id @default(autoincrement())
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  description String?
  videoUrl    String
  durationSec Int?
  orderIndex  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
  @@unique([courseId, orderIndex])
}